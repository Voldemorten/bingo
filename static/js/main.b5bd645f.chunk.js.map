{"version":3,"sources":["components/MyButton/MyButton.tsx","components/BingoBoard/BingoBoardNumber/BingoBoardNumber.tsx","components/BingoBoard/BingoBoard.tsx","components/BingoCard/BingoCardNumber/BingoCardNumber.tsx","components/BingoCard/BingoCard.tsx","components/BingoChecker/BingoChecker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MyButton","handleClick","buttonText","onClick","type","className","BingoBoardNumber","render","props","picked","number","Component","bNo","this","BingoBoard","rows","columns","amountOfNumbers","componentDidUpdate","prevProps","prevState","getDrawnNumbers","state","drawnNumbers","generateBoardNumbers","numbers","r","Array","c","drawNumber","Math","floor","random","boardNumbers","length","alert","resetState","setState","prev","push","lastDrawnNumber","handleCloseResetModal","showResetModal","handleOpenResetModal","emptyState","Table","map","row","ri","key","ci","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","forEach","item","indexOf","BingoNumber","clickable","numberClicked","initialPickedValue","BingoCard","numbersPerRow","markAllDrawnNumbers","cardNumbers","pickedNumbers","serialState","serialNo","initPickNumbers","ceil","addNullNumbers","generateCardNumbers","numberIsPicked","seed","rng","seedrandom","rowCounts","t","tens","column","sort","a","b","i","cIndex","no","rIndex","idxs","idx","newRows","printBingoCard","nos","console","table","clickNumber","numberFromChild","objectFound","filter","existingSeed","existingSeedValue","BingoChecker","serialNumberRef","handleCloseModal","showModal","handleOpenModal","current","value","InputGroup","FormControl","placeholder","aria-label","ref","Append","React","createRef","filteredNumbers","ReactGA","initialize","pageview","App","callbackNumbers","numbersFromBoard","view","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5bd645f.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './MyButton.css';\n\n\ntype buttonProps = {\n    handleClick: () => void,\n    buttonText: string\n  }\n  \n\nconst MyButton: React.FC<buttonProps> = ({handleClick, buttonText}) => {\n    return <button onClick={handleClick} type=\"button\" className=\"btn btn-primary my-btn\">{buttonText}</button>\n}\n\nexport default MyButton;\n","import React, { Component } from 'react';\nimport './BingoBoardNumber.css';\n\n//type BingoNumberState = { picked: boolean}\ntype BingoBoardNumberProps = { number: number, picked: boolean }\n\nclass BingoBoardNumber extends Component<BingoBoardNumberProps, any> {\n    render = () => {\n        return <td className={'number ' + (this.props.picked ? 'picked' : '')}>{this.props.number}</td>\n    }\n}\n\nexport default BingoBoardNumber;","\nimport React, { Component } from 'react';\nimport './BingoBoard.css';\nimport MyButton from '../MyButton/MyButton';\nimport BingoBoardNumber from './BingoBoardNumber/BingoBoardNumber'\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\n\nclass bNo {\n    number: number\n    picked: boolean\n\n    constructor(number: number) {\n        this.number = number\n        this.picked = false;\n    }\n}\n\ntype BingoBoardState = {\n    drawnNumbers: number[],\n    boardNumbers: bNo[][],\n    lastDrawnNumber: number,\n    showResetModal: boolean\n};\n\ntype BingoBoardProps = {\n    getDrawnNumbers: (numbers:number[]) => void\n    drawnNumbers: number[]\n}\n\nclass BingoBoard extends Component<BingoBoardProps, BingoBoardState> {\n    rows: number\n    columns: number\n    amountOfNumbers: number\n\n\n    constructor(props: any) {\n        super(props);\n\n        this.rows = 10\n        this.columns = 9\n        this.amountOfNumbers = this.rows * this.columns\n\n        this.state = {\n          boardNumbers: this.generateBoardNumbers(this.rows, this.columns),\n          drawnNumbers: this.props.drawnNumbers,\n          lastDrawnNumber: 0,\n          showResetModal: false\n        }\n\n        //state is preserved\n        if(this.props.drawnNumbers.length > 0) {\n          this.state.boardNumbers.forEach(row => {\n            row.forEach(item => {\n              if(this.state.drawnNumbers.indexOf(item.number) > -1) {\n                item.picked = true;\n              }\n            });\n          });\n        }\n\n\n\n    }\n\n    //to pass drawn numbers to parent\n    // TODO: Fixs bug when resetting. Needs to be double clicked before clearing.\n    componentDidUpdate = (prevProps:any, prevState:any) => {\n        this.props.getDrawnNumbers(this.state.drawnNumbers)\n    }\n\n    generateBoardNumbers = (rows: number, columns: number) => {\n        var numbers = []\n        for (let r = 0; r<rows; r++) {\n            numbers[r] = new Array(columns);\n            for(let c = 0; c<this.columns; c++) {\n                numbers[r][c] = new bNo(r+10*c+1)\n            }\n        }\n        return numbers;\n    }\n\n    drawNumber = () => {\n        do {\n            var r = Math.floor(Math.random()*this.rows);\n            var c = Math.floor(Math.random()*this.columns);\n        }\n        while (this.state.boardNumbers[r][c].picked && this.state.drawnNumbers.length !== this.amountOfNumbers)\n\n        if(this.state.drawnNumbers.length === this.amountOfNumbers) {\n            alert(\"All numbers drawn. Resetting...\")\n            this.resetState();\n        } else {\n            this.setState((prev, props) => {\n                prev.boardNumbers[r][c].picked = true\n                prev.drawnNumbers.push(prev.boardNumbers[r][c].number)\n                return {\n                    boardNumbers: prev.boardNumbers,\n                    drawnNumbers: prev.drawnNumbers,\n                    lastDrawnNumber: prev.boardNumbers[r][c].number\n                }\n            })\n        }\n    }\n\n    handleCloseResetModal = () => this.setState({showResetModal: false});\n    handleOpenResetModal = () => this.setState({showResetModal: true});\n\n    resetState = () => {\n        this.setState((prev, props) => this.emptyState())\n    }\n\n    emptyState = () => {\n        return {\n            boardNumbers: this.generateBoardNumbers(this.rows, this.columns),\n            drawnNumbers: [],\n            lastDrawnNumber: 0,\n            showResetModal: false\n        }\n    }\n\n\n    render = () => {\n        return (\n            <div className=\"bingoBoard\">\n                <Table className=\"custom-table\">\n                    <tbody>\n                        {this.state.boardNumbers.map((row, ri) => {\n                            return (\n                                <tr key= {ri}>\n                                    {row.map((number, ci) => {\n                                        return <BingoBoardNumber key={number.number} number={number.number} picked={number.picked}/>\n                                    })}\n                                </tr>\n                            )\n\n                        })}\n                    </tbody>\n                </Table>\n                <div className=\"buttons\">\n                    <MyButton\n                        handleClick ={this.drawNumber}\n                        buttonText = \"Draw number\"\n                    ></MyButton>\n                    <MyButton\n                        handleClick = {this.handleOpenResetModal}\n                        buttonText = \"Reset\"\n                    ></MyButton>\n                </div>\n\n                <div className={this.state.lastDrawnNumber === 0 ? 'invisible' : ''}>\n                    Last drawn number: {this.state.lastDrawnNumber}\n                </div>\n\n                <Modal show={this.state.showResetModal} onHide={this.handleCloseResetModal}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Check bingo card</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <p> Are you sure you want to reset the board </p>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.resetState}>\n                            Reset board\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.handleCloseResetModal}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n            </div>\n        )\n\n    }\n}\n\nexport default BingoBoard;\n","import React, { Component } from 'react';\nimport './BingoCardNumber.css';\n\ntype BingoNumberState = { picked: boolean}\ntype BingoNumberProps = { \n    number: number,\n    numberClicked: (element: any) => void,\n    initialPickedValue:boolean\n    clickable:boolean\n}\n\nclass BingoNumber extends Component<BingoNumberProps, BingoNumberState> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            picked: this.props.initialPickedValue,\n        }\n    }\n\n\n    render = () => {\n        return <td className={'number ' + (this.state.picked ? 'picked' : '')} onClick={this.handleClick}>{this.props.number}</td>\n    }\n\n    \n\n    handleClick = () => {\n        if(this.props.clickable) {\n            this.setState((prev, props) => {\n                return {\n                    picked: !prev.picked\n                }\n            })\n            this.props.numberClicked(this.props.number)\n        }\n    }\n}\n\nexport default BingoNumber;","import React, { Component } from 'react';\nimport './BingoCard.css';\nimport seedrandom from 'seedrandom';\nimport BingoCardNumber from './BingoCardNumber/BingoCardNumber';\nimport Table from 'react-bootstrap/Table'\n\n\ntype BingoCardState = {\n    pickedNumbers: number[],\n    cardNumbers: number[][],\n    serialNo: number\n};\n\n//this is for checing the card as admin. \ntype BingoCardProps = {\n    existingSeed: boolean\n    existingSeedValue?: number\n    drawnNumbers?: number[]\n    clickable: boolean\n}\n\n\nclass BingoCard extends Component<BingoCardProps, BingoCardState> {\n    rows: number\n    columns: number\n    numbersPerRow: number\n\n\n    constructor(props: any) {\n        super(props);\n      \n        this.rows = 3\n        this.columns = 9\n        this.numbersPerRow = 5\n\n        //set state based on existing seed. If a seed has been sent, use that seed to generate the numbers. \n        if(this.props.existingSeed) {\n            this.state = this.serialState(this.props.existingSeedValue)\n        } else {\n            this.state = this.serialState()\n        }\n        // this.printBingoCard(this.state.cardNumbers);\n    }\n\n    markAllDrawnNumbers = (cardNumbers:number[][]) => {\n        let pickedNumbers:number[] = []\n        cardNumbers.forEach((row) => {\n            row.forEach((number) => {\n                if(this.props.drawnNumbers?.indexOf(number) !== -1) pickedNumbers.push(number)\n            })\n        })\n        return pickedNumbers\n        // this.setState((prev, props) => {\n        //     return {\n        //         pickedNumbers:pickedNumbers\n        //     }\n        // })\n    }\n\n    resetState = () => {\n        this.setState((prev, props) => this.serialState())\n    }\n\n    // TODO: refactor this shit. It's fucking horrible. But it works. \n    serialState = (serialNo?:number) => {\n        let initPickNumbers = true;\n\n        let pickedNumbers:number[] = []\n        \n        if(!serialNo) {\n            serialNo = Math.ceil(Math.random()*9999)\n            initPickNumbers = false;\n        }\n        let cardNumbers = this.addNullNumbers(this.generateCardNumbers(serialNo))\n        \n        if(initPickNumbers) {\n            pickedNumbers = this.markAllDrawnNumbers(cardNumbers)\n        }\n\n        return {\n            pickedNumbers: pickedNumbers,\n            serialNo: serialNo,\n            cardNumbers: cardNumbers,\n        }\n    }\n\n    numberIsPicked = (number:number) => {\n        return this.state.pickedNumbers.indexOf(number) !== -1;\n    }\n\n    generateCardNumbers = (seed:number) => {\n        var rng = seedrandom(seed+'');\n        let numbers:number[] = []\n        let columns:number[][] = [[],[],[],[],[],[],[],[],[]] //we can maximum have three numbers of each 10\n        let rows:number[][] = [[],[],[]]\n        let rowCounts: number[] = [0,0,0];\n\n        //generate 15 distict numbers and sort them into columns\n        while(numbers.length<15) {\n            let t = Math.floor(rng()*90)+1;\n            let tens = Math.floor((t/10)%10) //get 10's i.e. 10 = 1, 24 = 2, 68 = 6\n            if(tens === 9) tens = 8 //special 90 case.\n            let column = columns[tens] // get the column based on the 10-value.\n            if(numbers.indexOf(t) === -1 && column.length < 3) {\n                column.push(t)\n                numbers.push(t)\n            }\n        }\n        //sorting\n        numbers.sort((a,b) => a-b) //needed for whatever reason.\n        columns.forEach((c, i) => {\n            c.sort((a, b) => a - b)\n        })\n\n        //insert three-value-columns first\n        let threeC = columns.map((column) => {\n            if(column.length === 3) return column\n            return []\n        })\n\n        threeC.forEach((column, cIndex) => {\n            column.forEach((no, rIndex) => {\n                rows[rIndex][cIndex] = no;\n                rowCounts[rIndex]++;\n            })\n        })\n\n\n        let twoC = columns.map((column) => {\n            if(column.length === 2) return column\n            return []\n        })\n\n        //TWOS\n        twoC.forEach((column, cIndex) => {\n            var idxs:number[] = [];\n                column.forEach(() => {\n                    while(idxs.length < column.length) {\n                        let r = Math.floor(rng()*3);\n                        if(rowCounts[r] < 5 && idxs.indexOf(r) === -1) {\n                            idxs.push(r)\n                            rowCounts[r]++\n                        }\n                    }\n                })\n            idxs.sort();    \n            idxs.forEach((idx, i) => {\n                rows[idx][cIndex] = column[i]\n            })\n        })\n\n\n        //ONES\n        let oneC = columns.map((column) => {\n            if(column.length === 1) return column\n            return []\n        })\n\n        oneC.forEach((column, cIndex) => {\n            if(column.length === 1) {\n                let r = Math.floor(rng()*3);\n                while(rowCounts[r] === 5) {\n                    r = Math.floor(rng()*3)\n                }\n                rowCounts[r]++\n                rows[r][cIndex] = column[0]\n            }\n        })\n\n        return rows;\n    }\n\n    addNullNumbers = (rows:number[][]) => {\n        //note: not using map because it doesn't map over undefined. \n        let newRows:any[][] = [[],[],[]]\n        for(let r = 0; r<rows.length; r++) {\n            //hack to make sure all arrays are of length 9 even though element are only assigned to first x columns. \n            rows[r].length = 9;\n            for(let c = 0; c<rows[r].length; c++) {\n                if(!rows[r][c]) newRows[r][c] = null\n                else newRows[r][c] = rows[r][c]\n            }\n        }\n        return newRows\n    }\n\n    printBingoCard = (rows:number[][]) => {\n        let nos = rows.map(row => row.map(no => {\n            if (no) return no\n            return null\n        }))\n        console.table(nos);\n    }\n\n    clickNumber = (numberFromChild: number) => {\n        let objectFound = false;\n        this.state.pickedNumbers.forEach((number) => {\n            if(number === numberFromChild) objectFound = true;\n        })\n        //number not found => add\n        if(!objectFound) {\n            this.setState((prev) => {\n                prev.pickedNumbers.push(numberFromChild);\n                return {\n                    pickedNumbers: prev.pickedNumbers\n                }\n            })\n        } else { //remove\n            this.setState((prev) => {\n                let newNumbers = prev.pickedNumbers.filter(number => number !== numberFromChild)\n                return {\n                    pickedNumbers: newNumbers\n                }\n            })\n        }\n    }\n\n    render = () => {\n        return (\n            <div className=\"bingoCard\">\n                <Table className=\"custom-table\">\n                    <tbody>\n                        {this.state.cardNumbers.map((row, ri) => {\n                            return (\n                                <tr key={ri}>                                    \n                                    {row.map((number, ci) => {\n                                        //number might be undefined\n                                        if(number) {\n                                            return (\n                                                <BingoCardNumber \n                                                    key={ri*9+ci}\n                                                    number={number}\n                                                    numberClicked={this.clickNumber}\n                                                    initialPickedValue={this.numberIsPicked(number)}\n                                                    clickable={this.props.clickable}\n                                                />\n                                            )\n                                        }\n                                        return <td key={ri*9+ci}></td>;\n                                    })}\n                                </tr>\n                            ) \n                        })}\n                    </tbody>\n                </Table>\n                <div className=\"serialNo\">\n                    Serial no: {this.state.serialNo}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BingoCard;\n\n","\nimport React, { Component } from 'react';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport './BingoChecker.css';\nimport BingoCard from '../BingoCard/BingoCard';\n\ntype BingoCheckerState = {serialNo:number, filteredNumbers:number[][], showModal:boolean}\ntype BingoCheckerProps = {drawnNumbers: number[]}\n\nclass BingoChecker extends Component<BingoCheckerProps, BingoCheckerState> {\n    serialNumberRef:any\n    \n    constructor(props: any) {\n        super(props)\n        this.serialNumberRef = React.createRef();\n        this.state = {\n            serialNo: 0,\n            filteredNumbers: [[],[],[]],\n            showModal: false,\n        } \n    }\n\n    handleCloseModal = () => this.setState({showModal: false})\n    handleOpenModal = () => {\n        if(this.serialNumberRef.current.value) {\n            this.setState({\n                serialNo: this.serialNumberRef.current.value,\n                showModal: true\n            })\n        }\n    }\n    \n            \n    render = () => {\n        return (\n            <div className=\"bingoChecker\">\n                <InputGroup>\n                    <FormControl\n                    placeholder=\"Serial number\"\n                    aria-label=\"Serial number\"\n                    ref={this.serialNumberRef}\n                    />\n                    <InputGroup.Append>\n                        {/* TODO: Disable this button when the field is empty. Can't do that with ref right now. Maybe look into componentDidMount */}\n                        <Button variant=\"primary\" onClick={this.handleOpenModal}>Check bingo card!</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n\n                <Modal show={this.state.showModal} onHide={this.handleCloseModal}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Check bingo card</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {/* Immediately invoked function for conditional rendering */}\n                        {(() => {\n                            if(this.state.serialNo !== 0) return <BingoCard existingSeed={true} existingSeedValue={this.state.serialNo} drawnNumbers={this.props.drawnNumbers} clickable={false}/>\n                        })()}\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.handleCloseModal}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n            \n        )\n    }\n}\n            \nexport default BingoChecker;","import React, { Component } from 'react';\nimport './App.css';\nimport BingoBoard from './components/BingoBoard/BingoBoard';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BingoCard from './components/BingoCard/BingoCard';\nimport BingoChecker from './components/BingoChecker/BingoChecker';\nimport MyButton from './components/MyButton/MyButton';\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-162373192-1');\nReactGA.pageview('/bingo');\n\ntype AppState = {view:number, drawnNumbers:number[]}\n\nclass App extends Component<any, AppState> {\n    constructor(props:any) {\n        super(props)\n        this.state = {\n            view: 0,\n            drawnNumbers: []\n        }\n    }\n\n    callbackNumbers = (numbersFromBoard: number[]) => {\n        //to prevent infinity loop in component did update. Because this is called in the child component component did update\n        // check this : https://reactjs.org/docs/react-component.html#componentdidupdate\n        if(this.state.drawnNumbers !== numbersFromBoard) {\n            this.setState({drawnNumbers: numbersFromBoard})\n        }\n    }\n\n    render = () => {\n        switch(this.state.view) {\n            case 0: {\n                return (\n                    <div className=\"App\">\n                        <header className=\"App-header\">\n                        Velkommen til Mortens bingo!\n                        </header>\n                        <div className=\"buttons\">\n                            <MyButton handleClick={() => this.setState((prev, props) => {\n                                return {\n                                    view: 1\n                                }\n                            })} buttonText=\"Bingo board\"/>\n                            <MyButton handleClick={() => this.setState((prev, props) => {\n                                return {\n                                    view: 2\n                                }\n                            })} buttonText=\"Bingo card\"/>\n                        </div>\n                        <div className=\"introDiv\">\n                            <p>\n                            This is a small project built with react, typescript and bootstrap.\n                            <br/><br/>\n                            When opening the project, you have two choices, bingo board and bingo card.\n                            <br/><br/>\n                            When you view the bingo board, this view is supposed to be put on a large screen for everyone to see. This is the facilitator's (bingo master's) screen. From here the bingo master is able to draw a random number between 1 and 90, like in a traditional bingo game. Furthermore the bingo master's screen has the opportunity to check a bingo plate given a serial number.\n                            <br/><br/>\n                            Everyone besides the bingo master (the players) choose the bingo card option. This generates a random bingo card with 3 rows each containing 5 numbers and a random serial number. This random serial number is used as the seed value to generate the bingo card, and thus when a player yells bingo, they can give the bingo master the serial number for the card, and the card can be checked.\n                            </p>\n                        </div>\n                    </div>\n                    )\n                }\n                case 1: {\n                    return (\n                        <div className=\"App\">\n                            <BingoBoard getDrawnNumbers={this.callbackNumbers} drawnNumbers={this.state.drawnNumbers}/>\n                            <BingoChecker drawnNumbers={this.state.drawnNumbers} />\n                            <MyButton handleClick={() => this.setState((prev, props) => {\n                                return {\n                                    view: 0\n                                }\n                            })} buttonText=\"Go to front page\"/>\n                        </div>\n                    )\n                }\n                case 2: {\n                    return (\n                        <div className=\"App\">\n                            <BingoCard existingSeed={false} clickable={true}/>\n                            <BingoCard existingSeed={false} clickable={true}/>\n                            <BingoCard existingSeed={false} clickable={true}/>\n                            <MyButton handleClick={() => this.setState((prev, props) => {\n                                return {\n                                    view: 0\n                                }\n                            })} buttonText=\"Go to front page\"/>\n                        </div>\n                    )\n\n                    }\n                }\n            }\n        }\n\n        export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}